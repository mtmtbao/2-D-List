# Author: Mengting Bao (mtbao@bu.edu),06/09/2022
# Description: This file contains function of matrix operations


def display_menu():
    """ prints a menu of options
    """  
    print()
    print('(0) Enter a new matrix')
    print('(1) Negate the matrix')
    print('(2) Multiply a row by a constant')
    print('(3) Add one row to another')
    print('(4) Add a multiple of one row to another')
    print('(5) Transpose the matrix')
    print('(6) Quit')
    print()

def print_matrix(matrix):
    """ prints the specified matrix in rectangular form.
        input: matrix is a 2-D list numbers
    """
    ## You will revise this function. 
    print(matrix)
       
def get_matrix():
    """ gets a new matrix from the user and returns it
    """
    matrix = eval(input('Enter a new 2-D list of numbers: '))
    return matrix

def negate_matrix(matrix):
    """ negates all of the elements in the specified matrix
        inputs: matrix is a rectangular 2-D list of numbers
    """
    for r in range(len(matrix)):
        for c in range(len(matrix[0])):
            matrix[r][c] *= -1
    # We don't need to return the matrix!
    # All changes to the matrix will still be there when the
    # function returns, because we received a copy of the
    # *reference* to the matrix used by main().

### Add your functions for options 2-5 here. ###

def main():
    """ the main user-interaction loop
    """
    ## The default starting matrix.
    ## DO NOT CHANGE THESE LINES.
    matrix = [[ 1,  2,  3,  4],
              [ 5,  6,  7,  8],
              [ 9, 10, 11, 12]]

    while True:
        print()
        print_matrix(matrix)
        display_menu()
        choice = int(input('Enter your choice: '))

        if choice == 0:
            matrix = get_matrix()
        elif choice == 1:
            matrix = negate_matrix()

        # add code to handle the other options here
        elif choice == 2:
            r = int(input('Enter Row: '))
            m = float(input('Enter Multiplier: '))
            mult_row(matrix, r, m)
            matrix = mult_row()
        elif choice == 3:
            rs = int(input('Enter Original Row: '))
            rd = int(input('Enter Destination Row Index: '))
            add_row_into(matrix, rs, rd)
            matrix = add_row_into(matrix, rs, rd)
        elif choice == 4:
            m = float(input('Enter Multiplier: '))
            rs = int(input('Enter Original Row Index: '))
            rd = int(input('Enter Destination Row Index: '))
            matrix = add_mult_row_into(matrix, m, rs, rd)
        elif choice == 5:
            matrix = transpose(matrix)


        elif choice == 6:
            break
        else:
            print('Invalid choice. Try again.')


# function 1: print_matrix
def print_matrix(matrix):
    """ uses nested loops to print the matrix in 2-D form
        input: matrix is a rectangular 2-D list of numbers
    """
    for r in range(len(matrix)):
        for c in range(len(matrix[0])):
            print('%7.2f' % matrix[r][c], end=' ')
        print()



# function 2: adding options
def mult_row(matrix, r, m):
    """ multiplies row r of the specified matrix by the specified multiplier m
        inputs: matrix is a rectangular 2-D list of numbers
                r as a positive integer
                n as a float
    """
    for c in range(len(matrix[r])):
        matrix[r][c] *= m


def add_row_into(matrix, rs, rd):
    """ takes the specified 2-D list matrix and adds each element of row rs (the source row) to the corresponding element of row rd (the destination row)
        inputs: rs and rd as positive integers
    """
    for c in range(len(matrix[rd])):
        matrix[rd][c] += matrix[rs][c]


def add_mult_row_into(matrix, m, rs, rd):
    """takes the specified 2-D list matrix and adds each element of row rs (the source row), multiplied by m, to the corresponding element of row rd (the destination row)
    """
    for c in range(len(matrix[rd])):
        matrix[rd][c] += (matrix[rs][c]) * m



# function 3: transpose
def transpose(matrix):
    """ replaces the existing matrix with its transpose
    """
    height = range(len(matrix[0]))
    width = range(len(matrix))
    transp = [[0 for c in width] for r in height]
    
    for r in height:
        for c in width:
            transp[r][c] = matrix[c][r]
    return transp
